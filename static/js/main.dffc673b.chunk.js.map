{"version":3,"sources":["sleigh.svg","present.svg","snow.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","numberArray","i","push","window","onbeforeunload","App","state","usedNumbers","availableNumbers","currentNumber","animations","button","sleigh","present","opacity","display","pickRandomNumber","shuffledArray","_this","shuffle","newAvailableNumbers","slice","length","setState","number","setTimeout","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","resetAnimations","newUsedNumbers","_this$state","this","react_default","a","createElement","className","onClick","style","animation","src","id","map","snow","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dffc673b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sleigh.a1326e45.svg\";","module.exports = __webpack_public_path__ + \"static/media/present.ddfb8f45.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.14206736.svg\";","import React, { Component } from 'react';\nimport sleigh from './sleigh.svg';\nimport present from './present.svg';\nimport snow from './snow.svg';\nimport './App.css';\n\nlet numberArray = []\nfor (let i = 1; i <= 50; i++) {\n  numberArray.push(i);\n}\n\n// prevent window navigation\nwindow.onbeforeunload = function() {\n  return \"\";\n}\n\nclass App extends Component {\n  state = {\n    usedNumbers: [],\n    availableNumbers: numberArray,\n    currentNumber: null,\n    animations: {\n      button: null,\n      sleigh: null,\n      present: null,\n    },\n    opacity: {},\n    display: {},\n  }\n\n  pickRandomNumber = () => {\n    const shuffledArray = this.shuffle(this.state.availableNumbers)\n    const newAvailableNumbers = shuffledArray.slice(1, shuffledArray.length)\n \n    this.setState({\n      currentNumber: shuffledArray[0],\n      availableNumbers: newAvailableNumbers,\n      animations: {\n        button: 'buttonHide 2s',\n        sleigh: 'sleighpath 4s ease 0s forwards',\n        present: 'presentgrowth 2s ease-in 3.2s',\n        number: 'numberAppear 2s ease-in 5.2s',\n      },\n      display: {\n        present: 'block',\n        number: 'block',\n      }\n    })\n\n    setTimeout(() => {\n      this.setState({\n        opacity: {\n          button: 0\n        },\n        display: {\n          present: 'block',\n          number: 'block',\n          button: 'none',\n        }\n      })\n    }, 1000)\n\n    setTimeout(() => {\n      this.setState({\n        opacity: {\n          button: 0,\n          number: 1,\n        },\n      })\n    }, 5500)\n\n\n  }\n\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  resetAnimations = () => {\n    const newUsedNumbers = this.state.usedNumbers.slice();\n    newUsedNumbers.push(this.state.currentNumber);\n    this.setState({\n      usedNumbers: newUsedNumbers,\n      animations: {\n        button: 'buttonAppear 1s',\n        sleigh: '',\n        present: '',\n        number: 'numberHide 1s',\n      },\n      display: {\n        present: 'none',\n        number: 'block',\n        button: 'inline',\n      },\n      opacity: {\n        button: 1\n      }\n    })\n\n    setTimeout(() => {\n      this.setState({\n        display: {\n          present: 'none',\n          number: 'none',\n          button: 'inline',\n        }\n      })\n    }, 1000)\n  }\n\n  render() {\n\n    const {\n      usedNumbers,\n      animations,\n      opacity,\n      currentNumber,\n      display,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>KNO's festlige Banko</h1>\n        <button\n          className=\"pickButton\"\n          onClick={this.pickRandomNumber}\n          style={{\n            animation: animations.button,\n            opacity: opacity.button,\n            display: display.button,\n          }}>Go!</button>\n        <div className=\"numberContainer\">\n          <div>\n          <span\n            onClick={this.resetAnimations}\n            className=\"number\"\n            style={{\n              animation: animations.number,\n              opacity: opacity.number,\n              display: display.number,\n            }}\n          >\n            {currentNumber}\n          </span>\n          <span \n            className=\"present\"\n            style={{\n              animation: animations.present,\n              // display: display.present,\n            }} >\n          <img\n            src={present}\n          />\n          </span>\n          </div>\n        </div>\n        <img src={sleigh} id=\"sleigh\" style={{ animation: animations.sleigh }} />\n        <div className=\"side\">\n          {\n            usedNumbers.map((number) => (\n              <div className=\"sideNumber\">{number}</div>\n            ))\n          }\n        </div>\n        <div className=\"bottom\">\n          <img src={snow} />\n          <span><i>Gl√¶delig jul</i> fra Personaleforeningen, a part of UVdata, a part of KMD.</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}